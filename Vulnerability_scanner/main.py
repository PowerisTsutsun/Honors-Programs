import argparse
from directory_listing import check_directory_listing
from sql_injection import check_sql_injection
from xss_scanner import check_xss_vulnerability
from port_scanner import scan_ports
from utils import validate_url

def main():
    parser = argparse.ArgumentParser(description="Advanced Vulnerability Scanner")
    parser.add_argument("--target", required=True, help="Target URL or IP address")
    parser.add_argument("--scan", nargs="+", choices=["dir", "sql", "xss", "ports"],
                        default=["dir", "sql", "xss", "ports"],
                        help="Types of scans to perform (default: all)")
    args = parser.parse_args()
    
    target = args.target
    # Validate if it's a URL when testing web vulnerabilities
    if target.startswith("http"):
        if not validate_url(target):
            print("Invalid URL format.")
            return

    print(f"Starting vulnerability scan on {target}...\n")

    if "dir" in args.scan:
        print("Checking for directory listing...")
        if check_directory_listing(target):
            print("  [!] Directory listing is enabled!")
        else:
            print("  [-] Directory listing is not enabled.")

    if "sql" in args.scan:
        print("Checking for SQL injection vulnerabilities...")
    vuln_detected, remediation_message = check_sql_injection(target)
    if vuln_detected:
        print("  [!] " + remediation_message)
    else:
        print("  [-] No SQL injection vulnerability found.")


    if "xss" in args.scan:
        print("Checking for XSS vulnerabilities...")
        if check_xss_vulnerability(target):
            print("  [!] Potential XSS vulnerability detected!")
        else:
            print("  [-] No XSS vulnerability detected.")

    if "ports" in args.scan:
        print("Scanning for open ports...")
        open_ports = scan_ports(target)
        if open_ports:
            print("  [!] Open ports found:", open_ports)
        else:
            print("  [-] No common open ports detected.")

if __name__ == "__main__":
    main()
